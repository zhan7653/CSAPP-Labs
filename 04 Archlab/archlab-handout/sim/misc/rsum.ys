# Execution begins at address 0
    .pos 0
    irmovq stack, %rsp      # Set up stack pointer
    call main               # Execute main program
    halt                    # Terminate program

# Sample linked list
    .align 8
ele1:
    .quad 0x00a
    .quad ele2
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0

main:
    irmovq ele1, %rdi
    call rsum_list           # rsum_list(ele1)
    ret

# long rsum_list(list_ptr ls)
# ls in %rdi
rsum_list:
    pushq %rbx              # Save register
    xorq %rax, %rax         # val = 0
    andq %rdi, %rdi         # Set CC
    je return               # Goto return (if ls == 0)
    mrmovq (%rdi), %rax     # val = ls->val
    rrmovq %rax, %rbx       # Save val
    irmovq $8, %r8          # Constant 8
    addq %r8, %rdi          # Get &ls->next
    mrmovq (%rdi), %rdi     # ls = ls ->next
    call rsum_list          # rsum_list(ls->next)
    addq %rbx, %rax         # return val + rest
return:
    popq %rbx               # Restore register
    ret                     # Return


# Stack starts here and grows to lower address
    .pos 0x400
stack:
