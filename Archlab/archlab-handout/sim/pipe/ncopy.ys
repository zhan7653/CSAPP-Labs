#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# Version3: 10x10 unloop and the rest 2x2 unloop
# Average CPE: 7.69 (Score: 56.2/60.0)

	# Loop header
	# xorq %rax, %rax	# %rax already equals 0 in this environment
	iaddq $-9, %rdx		# len -= 9, len <= 0?
	jle Check	    	# if so, goto Check:

Loop:	
	mrmovq (%rdi), %r8	    # read val from src[i]
	mrmovq 8(%rdi), %r9	 	# read val1 from src[i+1]
	mrmovq 16(%rdi), %r10	# read val2 from src[i+2]
	mrmovq 24(%rdi), %r11	# read val3 from src[i+3]
	mrmovq 32(%rdi), %r12	# read val4 from src[i+4]
	mrmovq 40(%rdi), %r13	# read val5 from src[i+5]
	mrmovq 48(%rdi), %r14	# read val6 from src[i+6]
	mrmovq 56(%rdi), %rcx	# read val7 from src[i+7]
	mrmovq 64(%rdi), %rbx	# read val8 from src[i+8]
	mrmovq 72(%rdi), %rbp	# read val9 from src[i+9]
	rmmovq %r8, (%rsi) 		# store val to dst[i]
	rmmovq %r9, 8(%rsi)		# store val1 to dst[i+1]
	rmmovq %r10, 16(%rsi)	# store val2 to dst[i+2]
	rmmovq %r11, 24(%rsi)	# store val3 to dst[i+3]
	rmmovq %r12, 32(%rsi)	# store val4 to dst[i+4]
	rmmovq %r13, 40(%rsi)	# store val5 to dst[i+5]
	rmmovq %r14, 48(%rsi)	# store val6 to dst[i+6]
	rmmovq %rcx, 56(%rsi)	# store val7 to dst[i+7]
	rmmovq %rbx, 64(%rsi)	# store val8 to dst[i+8]
	rmmovq %rbp, 72(%rsi)	# store val9 to dst[i+9]
	
	andq %r8, %r8		# val <= 0?
	jle Npos1
	iaddq $1, %rax      # count++
Npos1:
	andq %r9, %r9		# val1 <= 0?
	jle Npos2
	iaddq $1, %rax		# count++
Npos2:
	andq %r10, %r10		# val2 <= 0?
	jle Npos3
	iaddq $1, %rax		# count++
Npos3:	
	andq %r11, %r11		# val3 <= 0?
	jle Npos4
	iaddq $1, %rax		# count++
Npos4:	
	andq %r12, %r12		# val4 <= 0?
	jle Npos5
	iaddq $1, %rax		# count++
Npos5:
	andq %r13, %r13		# val5 <= 0?
	jle Npos6
	iaddq $1, %rax		# count++
Npos6:
	andq %r14, %r14		# val6 <= 0?
	jle Npos7
	iaddq $1, %rax		# count++
Npos7:
	andq %rcx, %rcx		# val7 <= 0?
	jle Npos8
	iaddq $1, %rax		# count++
Npos8:
	andq %rbx, %rbx		# val8 <= 0?
	jle Npos9
	iaddq $1, %rax		# count++
Npos9:
	andq %rbp, %rbp		# val9 <= 0?
	jle Npos10
	iaddq $1, %rax		# count++
Npos10:
	iaddq $80, %rdi		# src += 10
	iaddq $80, %rsi		# dst += 10
	iaddq $-10, %rdx	# len -= 10, len > 0?
	jg Loop			    # if so, goto Loop:
Check:
	iaddq $8, %rdx 		# +9 -1
	jg Loop_o 			# Notice the branch prediction
	jmp Check_o

Loop_o:
	mrmovq (%rdi), %r10	    # read val from src[i]
	mrmovq 8(%rdi), %r11	# read val1 from src[i+1]
	rmmovq %r10, (%rsi) 	# store val to dst[i]
	rmmovq %r11, 8(%rsi)	# store val1 to dst[i+1]
	andq %r10, %r10		    # val <= 0?
	jle Npos_o1
	iaddq $1, %rax      # count++
Npos_o1:
	andq %r11, %r11		# val1 <= 0?
	jle Npos_o2
	iaddq $1, %rax		# count++
Npos_o2:	
	iaddq $16, %rdi		# src += 2
	iaddq $16, %rsi		# dst += 2
	iaddq $-2, %rdx		# len -= 2, len > 0?
	jg Loop_o			    # if so, goto Loop_o:
Check_o:
	mrmovq (%rdi), %r10	    # read val from src... 
	jl Done					# if len = -1, goto Done (avoid Load/use hazard)
	rmmovq %r10, (%rsi)	    # ...and store it to dst
	andq %r10, %r10		    # val <= 0?
	jle Done
	iaddq $1, %rax	

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
